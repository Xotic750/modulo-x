{"version":3,"sources":["../src/modulo-x.js"],"names":[],"mappings":"IAAO,K,GAAS,I,CAAT,K;AACP;;;;;;;;;;;;;;;;;AAgBA,IAAM,MAAM,GAAG,SAAS,MAAT,CAAgB,QAAhB,EAA0B,OAA1B,EAAmC;AAChD,MAAM,MAAM,GAAG,QAAQ,GAAG,OAA1B;AAEA,SAAO,KAAK,CAAC,MAAM,IAAI,CAAV,GAAc,MAAd,GAAuB,MAAM,GAAG,OAAjC,CAAZ;AACD,CAJD;;AAMA,eAAe,MAAf","file":"modulo-x.esm.js","sourcesContent":["const {floor} = Math;\n/**\n * The notation “x modulo y” (y must be finite and nonzero) computes a value k\n * of the same sign as y (or zero) such that abs(k) < abs(y) and x-k = q × y\n * for some integer q.\n *\n * Donald Knuth described floored division where the quotient is defined by\n * the floor function q = ⌊a/n⌋ and thus according to equation the remainder\n * would have the same sign as the divisor. Due to the floor function, the\n * quotient is always rounded downwards, even if it is already negative.\n *\n * @param {number} dividend - The integer to find the remainder of.\n * @param {number} divisor - The integer to divide by.\n * @returns {number} The integer remainder.\n * @see {@link http://www.ecma-international.org/ecma-262/6.0/#sec-algorithm-conventions}\n * @see {@link https://en.wikipedia.org/wiki/Modulo_operation}\n */\nconst modulo = function modulo(dividend, divisor) {\n  const remain = dividend % divisor;\n\n  return floor(remain >= 0 ? remain : remain + divisor);\n};\n\nexport default modulo;\n"]}